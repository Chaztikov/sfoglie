close all
clear all
%format long eng

addpath('./panel/')
addpath('./Amplification/')
addpath('./geometry/')
addpath('./utilities/')
addpath('./models/')
addpath('./wake/')
addpath('./BoundaryLayer/')
set(groot, 'defaultAxesTickLabelInterpreter','LaTex'); set(groot, 'defaultLegendInterpreter','LaTex');

%%
%  air foil geometry and panels
%------------------------------------

% Parameters
profile.c = 1;       % scale factor of the profile   
profile.M = 80;      % number of x-values, where nodes will be -> 2*M-1 nodes in total

Invisc=false;% true; % % only inviscid solution or with Boundary Layer
profile.alfa = 2*pi/180;% 0; % 

profile.Uinfty=1; % Anstroemgeschwindigkeit
Re= 4e5;  %6.536*10^4;% 
nkrit=  0.15;%  % critical amplification exponent for transition to take place

%cinematic viscosity
nu= profile.c*profile.Uinfty /Re;

NACA = [4 4 1 2]; % naca profil
NoSkew=true; % if true profile skewness neclected

% blowing region
withBlowing=[true;...  % blowing on suction side  
             false];    % blowing on pressure side 
% start region         
xBstart= [0.25;...
          0.25]* profile.c;
% end region      
xBend  = [0.86;...
          0.86]* profile.c;
% blowing intensity      
intensity=[0.001;...
           0.001]* profile.Uinfty;

% tripping
trip=[ false;...       
       false];
% trip=[ true;... % tripping on suction side      
%        true];   % tripping on pressure side  
xtrip=[ 0.1;...
        0.1]*profile.c;

%--------------------------------------------------


NW= round(profile.M/4)+2; %   number of wake nodes
%calculates x- and y-component of homogeneous flow
ui = profile.Uinfty*cos(profile.alfa); 
vi = profile.Uinfty*sin(profile.alfa);

% % calculate NACA profile Nodes
% profile = naca4(profile,NACA,NoSkew);
 clear NACA NoSkew

% import profile Nodes
data=load('Nodes.txt');
profile.nodes.X=transpose(data(:,1));profile.nodes.Y=transpose(data(:,2));
profile.N=length(data(:,1)); clear data

% create the panels, identify if Profile has sharp or blunt trailing edge
profile = create_panels(profile);



%%
%  inviscid solution
%------------------------------------

% Solve potential flow
 [field]=potential(profile);  
 
 % get Leading edge position -> secant approximation
[ profile.Nle,profile.sLE,profile.LE1,profile.LE2 ] = getStagnationPoint( field.gamma, profile.s );
 
Nle=profile.Nle;
N=profile.N;
% arc length vector pressure side
profile.sL=profile.s(Nle:end)-(profile.s(Nle)-profile.LE2)*ones(1,N-Nle+1); 
% arc length vector suction side
profile.sU=(profile.s(Nle-1)+profile.LE1)*ones(1,Nle-1)-profile.s(1:Nle-1);   

xU=profile.panels.X(1,1:Nle-1);
xL=profile.panels.X(1,Nle:end);
if profile.IsSharp; xL=[xL,profile.panels.X(2,end) ]; end


% Plot polar curves
if Invisc
    Cp=1-field.gamma.^2;
    CL=getCL(profile,field.gamma);
    if profile.IsSharp; Cp=[Cp; Cp(1)]; end
    figure()
    hold on; box on
    plot([xU,xL(1)], Cp(1:Nle));
    plot(xL,  Cp(Nle:end));
    xlim([0 1]);
    legend('$C_p=1-\gamma(s)^2$ Saugseite','$C_p=1-\gamma(s)^2$ Druckseite');
end




%%
%  Wake influence
%------------------------------------



%   calculate wake node position
%------------------------------------
% done by integrating the streamline throug the TE of inviscid solution
wake=GetWakeStreamline(field,profile,NW);

% Debug
if abs(round(profile.alfa*180/pi))<2e-3;
    str='./XFoilWerte/wakeX_alfa0.txt';
elseif abs(round(profile.alfa*180/pi)-2)<2e-3
    str='./XFoilWerte/wakeX_alfa2.txt';
elseif abs(round(profile.alfa*180/pi)-5)<2e-3
    str='./XFoilWerte/wakeX_alfa5.txt';
end
tmp=load(str);
XWt=tmp(:,2);
YWt=tmp(:,3);
%-> Drela, test values
XW=tmp(:,2:3);
wake.L=transpose(((XWt(2:end)-XWt(1:end-1) ).^2 + (YWt(2:end)-YWt(1:end-1) ).^2).^0.5);
wake.s=[0,cumsum(wake.L)];
wake.e=transpose(XW(2:end,:)-XW(1:end-1,:)); 
wake.e=[wake.e(1,:)./wake.L; wake.e(2,:)./wake.L];
wake.n=[-wake.e(2,:);wake.e(1,:)];
wake.theta=atan2(wake.e(1,:),-wake.e(2,:));
wake.x=XWt;
wake.y=YWt;
wake.nn=(wake.n(:,1:end-1)+wake.n(:,2:end))/2;
wake.nn=[wake.n(:,1),wake.nn, wake.n(:,end)];
wake.N =length(XWt);
clear tmp str


% Plot wake
% figure(); 
% hold on; box on;
% plot([profile.panels.X]',[profile.panels.Y]','k','Linewidth',2);
% plot(wake.x,wake.y,'k');
% plot(XWt,YWt,'b');
% axis equal; xlabel('x'); ylabel('y')

if Invisc
   LEstr = LEstreamline( field,profile,round(3*NW/4) ,1.2);
   figure(); 
   hold on; box on;
   plot([profile.panels.X]',[profile.panels.Y]','k','Linewidth',2);
   plot(wake.x,wake.y,'b');
   plot(LEstr.x,LEstr.y,'b');
   axis equal; xlabel('x'); ylabel('y') 
   return;
end


% Source coefficient matrix for airfoil nodes Bges
%-------------------------------------------------------------

% influence of airfoil nodes -> i=1,..,N ; j=1,..,N
B=Qlin(profile.nodes.X', profile.nodes.Y' ,profile); % piecewise linear ansatz

% influence of wake nodes -> i=1,..,N ; j=N+1,..,N+NW
Bw=Qlin(profile.nodes.X', profile.nodes.Y' ,wake,true); 

Bges=[B, Bw];


% [L,U,ind] = lu(field.Ages,'vector');
% ALU= U + L-eye(size(field.Ages));

Ai=inv(field.Ages);

%invert airfoil node Coeffs -> Coefficients by means of eq (10)
Btilde=-Ai(1:profile.N,1:profile.N)*Bges;


% Source coefficient matrix for wake nodes Bges
%-------------------------------------------------------------

% influence of airfoil nodes -> i=N+1,..,N+NW ; j=1,..,N
[Cg, Cq] = GradPsiN( profile,wake );


% add gamma influence on Cq
Cq2= Cq - Cg*Btilde;


D= [Btilde;Cq2];
% make sure first wake point has same velocity as trailing edge
D(N+1,:)=D(N,:);

% Debug
% if abs(profile.alfa)<1e-2
%     DT=load('./XFoilWerte/Dm_alfa0.txt');
% else
%     DT=load('./XFoilWerte/Dm_alfa2.txt');
% end

%  % correct adjust sign for pressure/suction side
%  sgn=ones(size(D));
%  sgn(1:profile.Nle-1,1:profile.Nle-1)=-sgn(1:profile.Nle-1,1:profile.Nle-1);
%  sgn(profile.Nle:end,profile.Nle:end)=-sgn(profile.Nle:end,profile.Nle:end);
% 
% 
%  UT=Uinv + (sgn.*DT)*ini.m; 
%  UU=Uinv + (sgn.*D )*ini.m; 
% 
%  figure 
%  hold on
%  plot(sges, Uinv)
%  plot(sges, UT)
%  plot(sges, UU)
%  legend('INV','XFoil','U')
     
     

%global arclength vector
sges= [profile.s, (profile.s(end)+profile.panels.L(end)/2)*ones(size(wake.s)) + wake.s]; 




% Calculate inviscous velocity
%---------------------------------------------

% Velocity at airfoil nodes
%UinvFoil=  Ai*( field.psi0*ones(N,1)+field.t); %-> equal to field.gamma

UFoil = abs(field.gamma);
nix= [wake.n(1,1); wake.n(1,:)'];
niy= [wake.n(2,1); wake.n(2,:)'];

UWake = ui*niy - vi*nix + Cg*field.gamma;
UWake(1)=UFoil(end); % First wake point has same velocity as TE
clear nix niy

Uinv=[UFoil; UWake];


clear Do Du Bwake CqFoil Cqwake 
%% 

%  viscous solution
%----------------------------------------------

%   without blowing

% initial solution for global Newton Method
Vb=zeros(size(Uinv));
ini = GetInitialSolution( profile,wake, Uinv,Vb,Re, 2, trip, xtrip );
%PlotStuff(profile,wake,ini, 'delta');
%PlotStuff(profile,wake,ini, 'U');


it=25; % maximum number of iterations

%  coupled boundary layer and potential flow solution
[sol, prfE]=NewtonEq( profile,wake,ini,D,Uinv,it);


% plot
inds=(prfE.Nle-1:-1:1);             % suction side node indizes
indp=(prfE.Nle  :prfE.N);           % pressure side node indizes
indw=(prfE.N    :prfE.N + wake.N);  % wake node indizes

% PlotStuff(profile,wake,sol, 'delta');
% PlotStuff(profile,wake,sol, 'U');
% PlotStuff(profile,wake,sol, 'tau');
% PlotStuff(profile,wake,sol, 'Cp');




%   with blowing
%%

if ~withBlowing(1) && withB(2); return; end

Vb=zeros(size(Uinv));
if withBlowing(1)
    indB1= find( xU < xBend(1) & xU > xBstart(1));
    Vb(indB1)=intensity(1);
end
if withBlowing(2)
    indB2= find( xL < xBend(2) & xL > xBstart(2));
    indB2= indB2 + (profile.Nle-1)*ones(size(indB2));
    Vb(indB2)=intensity(2);
end

iniB = GetInitialSolution( profile,wake, Uinv,Vb,Re, 2, trip, xtrip  );
%PlotStuff(profile,wake,iniB, 'delta');

it=25;
%  coupled boundary layer and potential flow solution
[solB, prfB]=NewtonEq( profile,wake,iniB,D,Uinv,it);

indBs=(prfB.Nle-1:-1:1);            % suction side node indizes
indBp=(prfB.Nle :prfB.N);           % pressure side node indizes
indBw=(prfB.N   :prfB.N + wake.N);  % wake node indizes


% PlotStuff(profile,wake,solB, 'delta');
% PlotStuff(profile,wake,solB, 'U');
% PlotStuff(profile,wake,solB, 'tau');
% PlotStuff(profile,wake,solB, 'Cp');



%PlotStuff(prfB,wake,solB, 'tau', indBs);
%%

% % Write out
% if Re== 400000
%     str1= 'Re4e5_';
% elseif Re== abs(Re-65360)<1
%     str1= 'Re65360_';
% end
% tmp=round(profile.alfa*180/pi);
% if abs(tmp-2)<2e-3
%     str2='alfa2_';
% elseif abs(tmp)<2e-3
%     str2='alfa0_';
% end
% 
% if abs(nkrit-9)<2e-3
%     str3='N9';
% elseif abs(nkrit-0.105)<2e-3
%     str3='N0105';
% elseif abs(nkrit-0.155)<2e-3
%     str3='N0155';
%  elseif abs(nkrit-0.15)<2e-3
%     str3='N015';   
% end
% str=[str1,str2,str3];

Xges=[profile.nodes.X'; wake.x];
Yges=[profile.nodes.X'; wake.x];

datBlow= [Xges,Yges,sges', solB.D,solB.T,solB.U,solB.Cp,solB.tau, solB.Cf ];
datNoBlow= [Xges,Yges,sges', sol.D,sol.T,sol.U,sol.Cp,sol.tau, sol.Cf ];


% dlmwrite(['./RANSWerte/Blowing_',str], datBlow);
% dlmwrite(['./RANSWerte/NoBlowing_',str], datNoBlow);

%--------------------------------------------------------------------
load('./RANSWerte/naca_wing_dns_400k.mat')

figure
ylabel('Cf')
xlabel('x/c')
hold on
plot(datNoBlow(1:80,1) ,datNoBlow(1:80,8) ,'g')
plot(datBlow(1:80,1) ,datBlow(1:80,8) ,'k')
plot([top1.xa], [top1.Cf]/2,'m+');
%plot([topc1.xa], [topc1.Cf]/2,'c+');
title('Saugseite')
legend('no blowing','blowing','LES no blowing', 'LES  blowing')

figure
ylabel('Cf')
xlabel('x/c')
hold on
plot(datNoBlow(81:160,1) ,datNoBlow(81:160,8) ,'g')
plot(datBlow(81:160,1) ,datBlow(81:160,8) ,'k')
plot([bottom1.xa], [bottom1.Cf]/2,'m+');
%plot([bottomc1.xa], [bottomc1.Cf]/2,'c+');
title('Druckseite')
legend('no blowing','blowing','LES no blowing', 'LES  blowing')


figure
ylabel('Cp')
xlabel('x/c')
hold on
plot(datNoBlow(1:160,1) ,datNoBlow(1:160,7) ,'g')
plot(datBlow(1:160,1) ,datBlow(1:160,7) ,'k')
plot([top1.xa], [top1.Cp],'m+');
plot([topc1.xa], [topc1.Cp],'c+');
plot([bottom1.xa], [bottom1.Cp],'m+');
plot([bottomc1.xa], [bottomc1.Cp],'c+');
legend('no blowing','blowing','LES no blowing', 'LES  blowing')

%--------------------------------------------------------------------
figure 
hold on
plot(prfE.nodes.X(1:prfE.N), sol.Cp(1:prfE.N) ,'g')
plot(prfE.nodes.X(1:prfE.N), solB.Cp(1:prfE.N) ,'b')
line([prfE.nodes.X(indB1(1))   prfE.nodes.X(indB1(1))]  , [-1 1],'color','black');
line([prfE.nodes.X(indB1(end)) prfE.nodes.X(indB1(end))], [-1 1],'color','black');
title('Pressure coefficient')
ylabel(' C_p ') 
xlabel(' x ')
legend('without blowing','with blowing','blowing region','location','northeast'); 

figure 
hold on
plot(prfE.nodes.X(1:prfE.N), sol.tau(1:prfE.N) ,'g')
plot(prfE.nodes.X(1:prfE.N), solB.tau(1:prfE.N) ,'b')
line([prfE.nodes.X(indB1(1))   prfE.nodes.X(indB1(1))]  , [min(solB.tau) max(sol.tau)],'color','black');
line([prfE.nodes.X(indB1(end)) prfE.nodes.X(indB1(end))], [min(solB.tau) max(sol.tau)],'color','black');
title('wall shear stress')
ylabel(' \tau_w ') 
xlabel(' x ')
legend('without blowing','with blowing','blowing region','location','northeast'); 


figure 
hold on
plot(prfE.nodes.X(1:prfE.Nle-1), sol.D(1:prfE.Nle-1) ,'k')
plot(prfE.nodes.X(1:prfE.Nle-1), sol.T(1:prfE.Nle-1) ,'b')
plot(prfE.nodes.X(1:prfE.Nle-1), solB.D(1:prfE.Nle-1) ,'r')
plot(prfE.nodes.X(1:prfE.Nle-1), solB.T(1:prfE.Nle-1) ,'g')
title('BL thickness on suction side')
ylabel(' \delta ') 
xlabel(' x ')
legend('$\delta_1$ without blowing','$\delta_2$ without blowing','$\delta_1$ with blowing','$\delta_2$ with blowing','location','northeast'); 

solB.Cf(solB.Cf>0.02)=0.02;
sol.Cf(sol.Cf>0.02)=0.02;




 



% Falkner-Skan
%--------------------------------------------

% H12=solEND.HK(1:profile.N+1);
% FS.Ret=solEND.Ret(1:profile.N+1);
% USQ=solEND.U(1:profile.N+1).^2;
% 
% m= (0.058*(H12-4.0).^2./(H12-1.0) - 0.068) ./ (6.54*H12 - 14.07) .* H12.^2;
% beta= 2*m./(m+1);
% 
% if ~isempty(find(beta<-0.199,1))
%    disp('beta <-0.199 found -> overshooting solution'); 
% end
% 
% 
% FS.H=zeros(size(beta));
% FS.H32=FS.H;
% FS.Cf=FS.H;
% FS.CD=FS.H;
% FS.ddf0=FS.H;
% FS.b1=FS.H;
% FS.b2=FS.H;
% FS.b3=FS.H;
% FS.bD=FS.H;
% 
% for i=1:profile.N+1
%     [~,erg ]=FalknerSkanInt(beta(i),false,false,false);
%     FS.H(i)  = erg.H12;
%     FS.H32(i)= erg.H32;
%     FS.Cf(i) = erg.Cf;
%     FS.CD(i) = erg.CD;
%     FS.b1(i) = erg.beta1;
%     FS.b2(i) = erg.beta2;
%     FS.b3(i) = erg.beta3;
%     FS.bD(i) = erg.betaD;
%     FS.ddf0(i)=erg.s;
% end
% 
% err= FS.H-H12;
% Relerr= abs(err./H12);
% 
% % divide by Ret
% FS.Cf= FS.Cf ./ FS.Ret;
% FS.CD= FS.CD ./ FS.Ret;
% 
% inds=1:prfEND.Nle-1;
% indp=prfEND.Nle:prfEND.N;
% 
% 
% figure 
% hold on
% % plot(prfEND.sU, tauX(inds),'g');
% % plot(prfEND.sU, FS.Cf(inds).*USQ,'b');
% plot(prfEND.sU, CfX(inds),'g');
% plot(prfEND.sU, FS.Cf(inds),'b');
% 
% 
% figure 
% hold on
% plot(prfEND.sU, CfX(inds),'g');
% plot(prfEND.sU, FS.Cf(inds).*USQ,'b');
% % plot(prfEND.sU, CfX(inds),'g');
% % plot(prfEND.sU, FS.Cf(inds),'b');



